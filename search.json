[{"title":"学习渗透测试的第一天","url":"/2025/07/25/%E5%AD%A6%E4%B9%A0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%9A%84%E7%AC%AC%E4%B8%80%E5%A4%A9/","content":"常用工具的安装与使用sqlmap：一个自动检测sql注入漏洞的软件​\t1.brupsuit中也存在sqlmap的插件\n​\t2.用sqlmap扫描学校网址\n\n\n​\t分析：结果是不成功的，根本没有连接上，我判断是学校网址是有waf防护的，因此接下来的行为应该是绕过waf，来进行sql的漏扫。\n​\t但现在只是简单的尝试，并不涉及waf绕过\n​\t3.提到了waf绕过——Tamper（有一些常用的temper、还可以自己编写）\n浏览器和插件​\t1.developer tools\n​\t2.hasher – brup 中的 decoder模块\n​\t**注：**这些插件太多了，打算随用随安吧。\n直接进入第二章：SQL注入攻击\n"},{"title":"Hello World","url":"/2025/07/12/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"学习如何将文章发布到hexo博客上","url":"/2025/07/15/%E5%AD%A6%E4%B9%A0%E5%A6%82%E4%BD%95%E5%B0%86%E6%96%87%E7%AB%A0%E5%8F%91%E5%B8%83%E5%88%B0hexo%E5%8D%9A%E5%AE%A2%E4%B8%8A/","content":"\n\n├── _config.landscape.yml：主题配置文件，如果&#x20;├── _config.yml：站点配置文件，对站点进行配置。&#x20;├── node_modules：用来存储已安装的各类依赖包。&#x20;├── package-lock.json：包版本依赖锁文件。&#x20;├── package.json：应用数据，Hexo的版本以及相关依赖包的版本等。&#x20;├── scaffolds：博客模版文件夹，包含page.md，post.md，draft.md三种。&#x20;├── source：资源文件夹，存放静态资源如博客md文件、图片等。&#x20;└── themes：主题文件夹，Hexo通过将网站内容与主题组合来生成静态网站。\n\n\n主要流程博客的初始化(细节)博客的启动\\配置(主参考)                            Github入门教程，适合新手学习（非常详细）-CSDN博客\nvscode中的markdown使用markdown的语法参考链接\nhexo的具体配置部分(官网)\n创建博客后,对网页进行修改后,因缓存原因,应该对博客进行服务器重启,或者清除浏览器缓存命令为\n现在重心不是在主题上,所以简单参考一下就好,先默认用博客的启动\\配置中的样式\n遇到的问题问题1：截图中路径依赖未下完全，导致无法打开博客的问题对症下药的解决链接，进行尝试哈哈，根本用不上，我就是个大聪明，文件名写错了！！！\n问题2：md文档中图片正常显示，博客中图片不显示的问题\n解决方案：step5,感觉这解决方案就是重复之前的配置,但讲明白了自动创建新文章的部分机制 还是可以看看的\n真正原因:参考这篇文章hexo博客中插入图片失败——解决思路及个人最终解决办法_hexo 文章插入图片失败-CSDN博客)\n\n创建hexo个人博客，hexo的任务是将md文档，转化成html。而md文档图片路径用的是相对路径，而heml文档用的则是绝对路径，所以涉及一个路径转换，也是要安装插件hexo-asset-image的原因。出现问题后查看两个文档的路径发现转换出现问题，查看插件hexo-asset-image的使用文档（READEM.md）\n将路径改完后发现,部分照片可以使用,图片示例如下,此时应该是存放html的文件中不包含图片,将图片复制过去,应该就能成功。\n\n问题3：打开github托管后的网址出现404\nimage-20250717061759540\n修改依照：博客搭建详细教程 · qiubaiying&#x2F;qiubaiying.github.io Wiki · GitHub\n原因：\n一定不要忘记更新mdw\n结果：成功部署心得：细心一点吧，但是如果能细心的话还是倒霉熊么\n"},{"title":"学习渗透测试的第二天 -- SQL注入攻击","url":"/2025/07/26/%E5%AD%A6%E4%B9%A0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%9A%84%E7%AC%AC%E4%BA%8C%E5%A4%A9-SQL%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB/","content":"**什么是SQL注入攻击:**开发者在开发过程中直接将url的get参数和post参数（用户输入的）直接与SQL语句进行拼接\nSQL注入分类：\n1.可回显注入：联合查询注入、报错注入、通过注入进行dns请求，达到可回显目的\n2.不可回显的注入：bool盲注、时间盲注\n3.二次注入：自己编写脚本实现自动化注入\n这里书中提到了waf（wab应用防火墙 – 是），觉得要了解一下基本的机制：*WAF基本原理与部署方式-CSDN博客\n就这篇文章进行学习：（主要记录不好理解的部分和以前没听过的部分，所以不成系统，概述性的了解，并未对其中的连接性介绍进行拆解）\n​\t\t\t1。功能概述：流量过滤、安全审计、防止cc攻击（攻击者大量请求-&gt;程序消耗大-&gt;服务器拒绝服务Doss）、应用交付网络（优化网络、加速设备）\n​\t\t\t2.作用：保障业务可靠性、可用性、安全性\n​\t\t\t3.主要功能：常见10大漏洞的防护     发现攻击IP锁定     防止CC攻击\n​\t\t\t4.发展历程：（IPS架构、反向代理、透明代理、流模式）目前国内的透明代理模式并不如国外的流模式waf，缺失主要在于会改变数据包\n\n\n\n\n联合查询sql注入–以例说明（dvwa、SQL injection、low）1.注入点判断，数字型&#x2F;字符型，正常来讲带闭合符号的判断，数字型判断正误正确则为数字型，反之则为字符型。\n\n正常输入判断正确判断条件，返回正常\n\n输入错误的片段条件，返回值仍然正常\n\n说明这个判断为字符型，不是数字型\n\n2.判断字段数（原因： union有严格的约束条件，必须保证字段数一致）\n\n可以使用**oerder by number （例：1’ order by 1#）**这种类型的语句，逐层递加number直到报错，报错前的number即为字段数。\n具体内容如下：\n正常回显，无报错\n正常回显，无报错\n![image-20250731013902317](.&#x2F;学习渗透测试的第二天 – SQL注入攻击&#x2F;image-20250731013902317.png)应报错，具体报错如下图：![image-20250731013944706](.&#x2F;学习渗透测试的第二天 – SQL注入攻击&#x2F;image-20250731013944706.png)说明此字段数应有两位。\n\n3.查看闭合类型：（原理：输入闭合符号进行测试，只要数字后边的字符不是闭合符的，数据库都会把错误的数据转化成正确的数据类型，例1 and 1&#x3D;2#，返回值是正确的，但是若输入的在数字后面的字符恰好是闭合符，则会形成闭合，若闭合后形成的sql语句是错误的，那么sql语句执行就会错误，从而造成页面显示错误）大部分闭合都是单引号\n\n输入以下图片中的语句，则会报错，因为数据库的查询语句处理不来**1&#x3D;2#**这个错误语句\n\n\n4.查看回显位（查看正常有几个可以正常返回查询数据的点位，要求前边的查询语句是非法的，所以只执行后边的语句）\n\n查询语句如下，-1’ union select 1,2#，具体如下图所示：\n回显正常、\n当输入 **-1’ union select 1,2,3#**回显异常，因为超出了可回显的范围\n\n\n5.查数据库库名()\n\n输入语句，因为判断有两个回显位，1占一个，另一个函数输出所有的数据库名**-1’ union select 1,group_concat(database())#**记得加注释符，没有注释符会报错。\n回显如下，返回数据库名”dvwa”\n\n可以使用group_concat()将所有内容写入一行并输出\n\n6.在数据库中查找表\n\n在数据库”dvwa“中查找表名的语句为**-1’ union 1,group_concat(table_name) from information_schema.tables where table_schema&#x3D;’dvwa’#**（含义为查找数据库中”   “库的所有表名）\n具体返回结果如下\ninformation_schema是mysql自带的库，里边存放着所有的表名和字段名（列名）\n\n7.在表中查找字段(列)\n\n在数据库中名为“user”的表中查找字段名的语句为**-1’ union select group_concat(column_name),2 from information_schema.columns where table_schema&#x3D;’dvwa’ and table_name&#x3D;’users’#**(含义为查找的数据库中库名为‘dvwa’和表名为‘users’中的列名)\n具体返回结果如下：\ntable_schema为库名，table_name为表名，column_name为列名\n\n8.在列中查找数据\n\n查找一个列中的数据的语句为**-1’ union select user,password from users#**\n具体返回结果如下，得到用户和密码\n\n"}]